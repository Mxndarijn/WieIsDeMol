plugins {
    id 'java'
    id "com.gradleup.shadow" version "8.3.3"
}

group = 'nl.mxndarijn'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "jitpack.io"
        url = 'https://jitpack.io/'
    }
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name ="placeholderapi"
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    implementation 'org.jetbrains:annotations:24.0.0'

    // Lombok - enabled for compileOnly with annotation processors
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'
    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly 'me.clip:placeholderapi:2.11.6'
    compileOnly 'com.mojang:authlib:1.5.21'
    compileOnly 'net.dmulloy2:ProtocolLib:5.4.0'

    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.github.LeonMangler:SuperVanish:6.2.18-3'
    implementation fileTree(dir: 'libsImpl', include: ['*.jar'])
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'com.zaxxer:HikariCP:6.3.0'
    implementation("com.googlecode.json-simple:json-simple:1.1")

}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

test {
    useJUnitPlatform()
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks.named('shadowJar') {
    archiveBaseName.set('wieisdemol') // Name of your plugin jar
    archiveVersion.set('')          // optional: omit version from filename
    archiveClassifier.set('')       // optional: omit "-all"

//    destinationDirectory.set(file("C:/Users/Jochem/Desktop/Minecraft Development/WieIsDeMol/plugins"))
}
